syntax = "proto3";
package base.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/Permify/permify/pkg/pb/base/v1";


message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
}

service Health {
  // If the requested service is unknown, the call will fail with status
  // NOT_FOUND.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse){
    option (google.api.http) = {get: "/healthz"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "health api"
      tags: ["Health"]
      operation_id: "health.check"
      description: ""
      extensions: {
        key: "x-codeSamples"
        value: {
          list_value: {
            values: {
              struct_value: {
                fields: {
                  key: "lang"
                  value: {string_value: ""}
                }
                fields: {
                  key: "label"
                  value: {string_value: ""}
                }
                fields: {
                  key: "source"
                  value: {string_value: ""}
                }
              }
            }
            values: {
              struct_value: {
                fields: {
                  key: "lang"
                  value: {string_value: ""}
                }
                fields: {
                  key: "label"
                  value: {string_value: ""}
                }
                fields: {
                  key: "source"
                  value: {string_value: ""}
                }
              }
            }
            values: {
              struct_value: {
                fields: {
                  key: "lang"
                  value: {string_value: ""}
                }
                fields: {
                  key: "label"
                  value: {string_value: ""}
                }
                fields: {
                  key: "source"
                  value: {string_value: ""}
                }
              }
            }
          }
        }
      }
    };
  }

  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}