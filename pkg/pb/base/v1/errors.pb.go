// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: base/v1/errors.proto

package basev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// authn
	ErrorCode_ERROR_CODE_MISSING_BEARER_TOKEN ErrorCode = 1001
	ErrorCode_ERROR_CODE_UNAUTHENTICATED      ErrorCode = 1002
	ErrorCode_ERROR_CODE_MISSING_TENANT_ID    ErrorCode = 1003
	ErrorCode_ERROR_CODE_INVALID_AUDIENCE     ErrorCode = 1004
	ErrorCode_ERROR_CODE_INVALID_CLAIMS       ErrorCode = 1005
	ErrorCode_ERROR_CODE_INVALID_ISSUER       ErrorCode = 1006
	ErrorCode_ERROR_CODE_INVALID_BEARER_TOKEN ErrorCode = 1007
	// validation
	ErrorCode_ERROR_CODE_VALIDATION                                        ErrorCode = 2000
	ErrorCode_ERROR_CODE_UNDEFINED_CHILD_TYPE                              ErrorCode = 2002
	ErrorCode_ERROR_CODE_UNDEFINED_CHILD_KIND                              ErrorCode = 2003
	ErrorCode_ERROR_CODE_UNDEFINED_RELATION_REFERENCE                      ErrorCode = 2006
	ErrorCode_ERROR_CODE_NOT_SUPPORTED_RELATION_WALK                       ErrorCode = 2007
	ErrorCode_ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL                ErrorCode = 2008
	ErrorCode_ERROR_CODE_DEPTH_NOT_ENOUGH                                  ErrorCode = 2009
	ErrorCode_ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES ErrorCode = 2010
	ErrorCode_ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE ErrorCode = 2011
	ErrorCode_ERROR_CODE_DUPLICATED_ENTITY_REFERENCE                       ErrorCode = 2012
	ErrorCode_ERROR_CODE_DUPLICATED_RELATION_REFERENCE                     ErrorCode = 2013
	ErrorCode_ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE                   ErrorCode = 2014
	ErrorCode_ERROR_CODE_SCHEMA_PARSE                                      ErrorCode = 2015
	ErrorCode_ERROR_CODE_SCHEMA_COMPILE                                    ErrorCode = 2016
	ErrorCode_ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY                    ErrorCode = 2017
	ErrorCode_ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY                  ErrorCode = 2018
	ErrorCode_ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION           ErrorCode = 2019
	ErrorCode_ERROR_CODE_UNIQUE_CONSTRAINT                                 ErrorCode = 2020
	ErrorCode_ERROR_CODE_INVALID_CONTINUOUS_TOKEN                          ErrorCode = 2021
	ErrorCode_ERROR_CODE_INVALID_KEY                                       ErrorCode = 2022
	ErrorCode_ERROR_CODE_ENTITY_TYPE_REQUIRED                              ErrorCode = 2023
	ErrorCode_ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA              ErrorCode = 2024
	ErrorCode_ERROR_CODE_INVALID_ARGUMENT                                  ErrorCode = 2025
	ErrorCode_ERROR_CODE_INVALID_RULE_REFERENCE                            ErrorCode = 2026
	ErrorCode_ERROR_CODE_NOT_SUPPORTED_WALK                                ErrorCode = 2027
	ErrorCode_ERROR_CODE_MISSING_ARGUMENT                                  ErrorCode = 2028
	ErrorCode_ERROR_CODE_ALREADY_EXIST                                     ErrorCode = 2029
	ErrorCode_ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED                       ErrorCode = 2030
	// not found
	ErrorCode_ERROR_CODE_NOT_FOUND                       ErrorCode = 4000
	ErrorCode_ERROR_CODE_ENTITY_TYPE_NOT_FOUND           ErrorCode = 4001
	ErrorCode_ERROR_CODE_PERMISSION_NOT_FOUND            ErrorCode = 4002
	ErrorCode_ERROR_CODE_SCHEMA_NOT_FOUND                ErrorCode = 4003
	ErrorCode_ERROR_CODE_SUBJECT_TYPE_NOT_FOUND          ErrorCode = 4004
	ErrorCode_ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND     ErrorCode = 4005
	ErrorCode_ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND ErrorCode = 4006
	ErrorCode_ERROR_CODE_RELATION_DEFINITION_NOT_FOUND   ErrorCode = 4007
	ErrorCode_ERROR_CODE_RECORD_NOT_FOUND                ErrorCode = 4008
	ErrorCode_ERROR_CODE_TENANT_NOT_FOUND                ErrorCode = 4009
	ErrorCode_ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND  ErrorCode = 4010
	ErrorCode_ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH         ErrorCode = 4011
	ErrorCode_ERROR_CODE_BUNDLE_NOT_FOUND                ErrorCode = 4012
	ErrorCode_ERROR_CODE_RULE_DEFINITION_NOT_FOUND       ErrorCode = 4013
	ErrorCode_ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND      ErrorCode = 4014
	ErrorCode_ERROR_CODE_REFERENCE_NOT_FOUND             ErrorCode = 4015
	// internal
	ErrorCode_ERROR_CODE_INTERNAL                                  ErrorCode = 5000
	ErrorCode_ERROR_CODE_CANCELLED                                 ErrorCode = 5001
	ErrorCode_ERROR_CODE_SQL_BUILDER                               ErrorCode = 5002
	ErrorCode_ERROR_CODE_CIRCUIT_BREAKER                           ErrorCode = 5003
	ErrorCode_ERROR_CODE_EXECUTION                                 ErrorCode = 5005
	ErrorCode_ERROR_CODE_SCAN                                      ErrorCode = 5006
	ErrorCode_ERROR_CODE_MIGRATION                                 ErrorCode = 5007
	ErrorCode_ERROR_CODE_TYPE_CONVERSATION                         ErrorCode = 5008
	ErrorCode_ERROR_CODE_ERROR_MAX_RETRIES                         ErrorCode = 5009
	ErrorCode_ERROR_CODE_ROLLBACK                                  ErrorCode = 5010
	ErrorCode_ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION ErrorCode = 5011
	ErrorCode_ERROR_CODE_NOT_IMPLEMENTED                           ErrorCode = 5012
	ErrorCode_ERROR_CODE_DATASTORE                                 ErrorCode = 5013
	ErrorCode_ERROR_CODE_UNKNOWN_STATEMENT_TYPE                    ErrorCode = 5014
	ErrorCode_ERROR_CODE_UNKNOWN_REFERENCE_TYPE                    ErrorCode = 5015
	ErrorCode_ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT        ErrorCode = 5016
	ErrorCode_ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT      ErrorCode = 5017
	ErrorCode_ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT     ErrorCode = 5018
	ErrorCode_ERROR_CODE_SERIALIZATION                             ErrorCode = 5019
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "ERROR_CODE_UNSPECIFIED",
		1001: "ERROR_CODE_MISSING_BEARER_TOKEN",
		1002: "ERROR_CODE_UNAUTHENTICATED",
		1003: "ERROR_CODE_MISSING_TENANT_ID",
		1004: "ERROR_CODE_INVALID_AUDIENCE",
		1005: "ERROR_CODE_INVALID_CLAIMS",
		1006: "ERROR_CODE_INVALID_ISSUER",
		1007: "ERROR_CODE_INVALID_BEARER_TOKEN",
		2000: "ERROR_CODE_VALIDATION",
		2002: "ERROR_CODE_UNDEFINED_CHILD_TYPE",
		2003: "ERROR_CODE_UNDEFINED_CHILD_KIND",
		2006: "ERROR_CODE_UNDEFINED_RELATION_REFERENCE",
		2007: "ERROR_CODE_NOT_SUPPORTED_RELATION_WALK",
		2008: "ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL",
		2009: "ERROR_CODE_DEPTH_NOT_ENOUGH",
		2010: "ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES",
		2011: "ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE",
		2012: "ERROR_CODE_DUPLICATED_ENTITY_REFERENCE",
		2013: "ERROR_CODE_DUPLICATED_RELATION_REFERENCE",
		2014: "ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE",
		2015: "ERROR_CODE_SCHEMA_PARSE",
		2016: "ERROR_CODE_SCHEMA_COMPILE",
		2017: "ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY",
		2018: "ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY",
		2019: "ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION",
		2020: "ERROR_CODE_UNIQUE_CONSTRAINT",
		2021: "ERROR_CODE_INVALID_CONTINUOUS_TOKEN",
		2022: "ERROR_CODE_INVALID_KEY",
		2023: "ERROR_CODE_ENTITY_TYPE_REQUIRED",
		2024: "ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA",
		2025: "ERROR_CODE_INVALID_ARGUMENT",
		2026: "ERROR_CODE_INVALID_RULE_REFERENCE",
		2027: "ERROR_CODE_NOT_SUPPORTED_WALK",
		2028: "ERROR_CODE_MISSING_ARGUMENT",
		2029: "ERROR_CODE_ALREADY_EXIST",
		2030: "ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED",
		4000: "ERROR_CODE_NOT_FOUND",
		4001: "ERROR_CODE_ENTITY_TYPE_NOT_FOUND",
		4002: "ERROR_CODE_PERMISSION_NOT_FOUND",
		4003: "ERROR_CODE_SCHEMA_NOT_FOUND",
		4004: "ERROR_CODE_SUBJECT_TYPE_NOT_FOUND",
		4005: "ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND",
		4006: "ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND",
		4007: "ERROR_CODE_RELATION_DEFINITION_NOT_FOUND",
		4008: "ERROR_CODE_RECORD_NOT_FOUND",
		4009: "ERROR_CODE_TENANT_NOT_FOUND",
		4010: "ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND",
		4011: "ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH",
		4012: "ERROR_CODE_BUNDLE_NOT_FOUND",
		4013: "ERROR_CODE_RULE_DEFINITION_NOT_FOUND",
		4014: "ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND",
		4015: "ERROR_CODE_REFERENCE_NOT_FOUND",
		5000: "ERROR_CODE_INTERNAL",
		5001: "ERROR_CODE_CANCELLED",
		5002: "ERROR_CODE_SQL_BUILDER",
		5003: "ERROR_CODE_CIRCUIT_BREAKER",
		5005: "ERROR_CODE_EXECUTION",
		5006: "ERROR_CODE_SCAN",
		5007: "ERROR_CODE_MIGRATION",
		5008: "ERROR_CODE_TYPE_CONVERSATION",
		5009: "ERROR_CODE_ERROR_MAX_RETRIES",
		5010: "ERROR_CODE_ROLLBACK",
		5011: "ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION",
		5012: "ERROR_CODE_NOT_IMPLEMENTED",
		5013: "ERROR_CODE_DATASTORE",
		5014: "ERROR_CODE_UNKNOWN_STATEMENT_TYPE",
		5015: "ERROR_CODE_UNKNOWN_REFERENCE_TYPE",
		5016: "ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT",
		5017: "ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT",
		5018: "ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT",
		5019: "ERROR_CODE_SERIALIZATION",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                                       0,
		"ERROR_CODE_MISSING_BEARER_TOKEN":                              1001,
		"ERROR_CODE_UNAUTHENTICATED":                                   1002,
		"ERROR_CODE_MISSING_TENANT_ID":                                 1003,
		"ERROR_CODE_INVALID_AUDIENCE":                                  1004,
		"ERROR_CODE_INVALID_CLAIMS":                                    1005,
		"ERROR_CODE_INVALID_ISSUER":                                    1006,
		"ERROR_CODE_INVALID_BEARER_TOKEN":                              1007,
		"ERROR_CODE_VALIDATION":                                        2000,
		"ERROR_CODE_UNDEFINED_CHILD_TYPE":                              2002,
		"ERROR_CODE_UNDEFINED_CHILD_KIND":                              2003,
		"ERROR_CODE_UNDEFINED_RELATION_REFERENCE":                      2006,
		"ERROR_CODE_NOT_SUPPORTED_RELATION_WALK":                       2007,
		"ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL":                2008,
		"ERROR_CODE_DEPTH_NOT_ENOUGH":                                  2009,
		"ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES": 2010,
		"ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE": 2011,
		"ERROR_CODE_DUPLICATED_ENTITY_REFERENCE":                       2012,
		"ERROR_CODE_DUPLICATED_RELATION_REFERENCE":                     2013,
		"ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE":                   2014,
		"ERROR_CODE_SCHEMA_PARSE":                                      2015,
		"ERROR_CODE_SCHEMA_COMPILE":                                    2016,
		"ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY":                    2017,
		"ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY":                  2018,
		"ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION":           2019,
		"ERROR_CODE_UNIQUE_CONSTRAINT":                                 2020,
		"ERROR_CODE_INVALID_CONTINUOUS_TOKEN":                          2021,
		"ERROR_CODE_INVALID_KEY":                                       2022,
		"ERROR_CODE_ENTITY_TYPE_REQUIRED":                              2023,
		"ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA":              2024,
		"ERROR_CODE_INVALID_ARGUMENT":                                  2025,
		"ERROR_CODE_INVALID_RULE_REFERENCE":                            2026,
		"ERROR_CODE_NOT_SUPPORTED_WALK":                                2027,
		"ERROR_CODE_MISSING_ARGUMENT":                                  2028,
		"ERROR_CODE_ALREADY_EXIST":                                     2029,
		"ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED":                       2030,
		"ERROR_CODE_NOT_FOUND":                                         4000,
		"ERROR_CODE_ENTITY_TYPE_NOT_FOUND":                             4001,
		"ERROR_CODE_PERMISSION_NOT_FOUND":                              4002,
		"ERROR_CODE_SCHEMA_NOT_FOUND":                                  4003,
		"ERROR_CODE_SUBJECT_TYPE_NOT_FOUND":                            4004,
		"ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND":                       4005,
		"ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND":                   4006,
		"ERROR_CODE_RELATION_DEFINITION_NOT_FOUND":                     4007,
		"ERROR_CODE_RECORD_NOT_FOUND":                                  4008,
		"ERROR_CODE_TENANT_NOT_FOUND":                                  4009,
		"ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND":                    4010,
		"ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH":                           4011,
		"ERROR_CODE_BUNDLE_NOT_FOUND":                                  4012,
		"ERROR_CODE_RULE_DEFINITION_NOT_FOUND":                         4013,
		"ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND":                        4014,
		"ERROR_CODE_REFERENCE_NOT_FOUND":                               4015,
		"ERROR_CODE_INTERNAL":                                          5000,
		"ERROR_CODE_CANCELLED":                                         5001,
		"ERROR_CODE_SQL_BUILDER":                                       5002,
		"ERROR_CODE_CIRCUIT_BREAKER":                                   5003,
		"ERROR_CODE_EXECUTION":                                         5005,
		"ERROR_CODE_SCAN":                                              5006,
		"ERROR_CODE_MIGRATION":                                         5007,
		"ERROR_CODE_TYPE_CONVERSATION":                                 5008,
		"ERROR_CODE_ERROR_MAX_RETRIES":                                 5009,
		"ERROR_CODE_ROLLBACK":                                          5010,
		"ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION":         5011,
		"ERROR_CODE_NOT_IMPLEMENTED":                                   5012,
		"ERROR_CODE_DATASTORE":                                         5013,
		"ERROR_CODE_UNKNOWN_STATEMENT_TYPE":                            5014,
		"ERROR_CODE_UNKNOWN_REFERENCE_TYPE":                            5015,
		"ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT":                5016,
		"ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT":              5017,
		"ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT":             5018,
		"ERROR_CODE_SERIALIZATION":                                     5019,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_base_v1_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_base_v1_errors_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_base_v1_errors_proto_rawDescGZIP(), []int{0}
}

// ErrorResponse
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=base.v1.ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_base_v1_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_v1_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_base_v1_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorResponse) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_base_v1_errors_proto protoreflect.FileDescriptor

const file_base_v1_errors_proto_rawDesc = "" +
	"\n" +
	"\x14base/v1/errors.proto\x12\abase.v1\"Q\n" +
	"\rErrorResponse\x12&\n" +
	"\x04code\x18\x01 \x01(\x0e2\x12.base.v1.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*\xe0\x15\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12$\n" +
	"\x1fERROR_CODE_MISSING_BEARER_TOKEN\x10\xe9\a\x12\x1f\n" +
	"\x1aERROR_CODE_UNAUTHENTICATED\x10\xea\a\x12!\n" +
	"\x1cERROR_CODE_MISSING_TENANT_ID\x10\xeb\a\x12 \n" +
	"\x1bERROR_CODE_INVALID_AUDIENCE\x10\xec\a\x12\x1e\n" +
	"\x19ERROR_CODE_INVALID_CLAIMS\x10\xed\a\x12\x1e\n" +
	"\x19ERROR_CODE_INVALID_ISSUER\x10\xee\a\x12$\n" +
	"\x1fERROR_CODE_INVALID_BEARER_TOKEN\x10\xef\a\x12\x1a\n" +
	"\x15ERROR_CODE_VALIDATION\x10\xd0\x0f\x12$\n" +
	"\x1fERROR_CODE_UNDEFINED_CHILD_TYPE\x10\xd2\x0f\x12$\n" +
	"\x1fERROR_CODE_UNDEFINED_CHILD_KIND\x10\xd3\x0f\x12,\n" +
	"'ERROR_CODE_UNDEFINED_RELATION_REFERENCE\x10\xd6\x0f\x12+\n" +
	"&ERROR_CODE_NOT_SUPPORTED_RELATION_WALK\x10\xd7\x0f\x122\n" +
	"-ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL\x10\xd8\x0f\x12 \n" +
	"\x1bERROR_CODE_DEPTH_NOT_ENOUGH\x10\xd9\x0f\x12A\n" +
	"<ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES\x10\xda\x0f\x12A\n" +
	"<ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE\x10\xdb\x0f\x12+\n" +
	"&ERROR_CODE_DUPLICATED_ENTITY_REFERENCE\x10\xdc\x0f\x12-\n" +
	"(ERROR_CODE_DUPLICATED_RELATION_REFERENCE\x10\xdd\x0f\x12/\n" +
	"*ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE\x10\xde\x0f\x12\x1c\n" +
	"\x17ERROR_CODE_SCHEMA_PARSE\x10\xdf\x0f\x12\x1e\n" +
	"\x19ERROR_CODE_SCHEMA_COMPILE\x10\xe0\x0f\x12.\n" +
	")ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY\x10\xe1\x0f\x120\n" +
	"+ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY\x10\xe2\x0f\x127\n" +
	"2ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION\x10\xe3\x0f\x12!\n" +
	"\x1cERROR_CODE_UNIQUE_CONSTRAINT\x10\xe4\x0f\x12(\n" +
	"#ERROR_CODE_INVALID_CONTINUOUS_TOKEN\x10\xe5\x0f\x12\x1b\n" +
	"\x16ERROR_CODE_INVALID_KEY\x10\xe6\x0f\x12$\n" +
	"\x1fERROR_CODE_ENTITY_TYPE_REQUIRED\x10\xe7\x0f\x124\n" +
	"/ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA\x10\xe8\x0f\x12 \n" +
	"\x1bERROR_CODE_INVALID_ARGUMENT\x10\xe9\x0f\x12&\n" +
	"!ERROR_CODE_INVALID_RULE_REFERENCE\x10\xea\x0f\x12\"\n" +
	"\x1dERROR_CODE_NOT_SUPPORTED_WALK\x10\xeb\x0f\x12 \n" +
	"\x1bERROR_CODE_MISSING_ARGUMENT\x10\xec\x0f\x12\x1d\n" +
	"\x18ERROR_CODE_ALREADY_EXIST\x10\xed\x0f\x12+\n" +
	"&ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED\x10\xee\x0f\x12\x19\n" +
	"\x14ERROR_CODE_NOT_FOUND\x10\xa0\x1f\x12%\n" +
	" ERROR_CODE_ENTITY_TYPE_NOT_FOUND\x10\xa1\x1f\x12$\n" +
	"\x1fERROR_CODE_PERMISSION_NOT_FOUND\x10\xa2\x1f\x12 \n" +
	"\x1bERROR_CODE_SCHEMA_NOT_FOUND\x10\xa3\x1f\x12&\n" +
	"!ERROR_CODE_SUBJECT_TYPE_NOT_FOUND\x10\xa4\x1f\x12+\n" +
	"&ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND\x10\xa5\x1f\x12/\n" +
	"*ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND\x10\xa6\x1f\x12-\n" +
	"(ERROR_CODE_RELATION_DEFINITION_NOT_FOUND\x10\xa7\x1f\x12 \n" +
	"\x1bERROR_CODE_RECORD_NOT_FOUND\x10\xa8\x1f\x12 \n" +
	"\x1bERROR_CODE_TENANT_NOT_FOUND\x10\xa9\x1f\x12.\n" +
	")ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND\x10\xaa\x1f\x12'\n" +
	"\"ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH\x10\xab\x1f\x12 \n" +
	"\x1bERROR_CODE_BUNDLE_NOT_FOUND\x10\xac\x1f\x12)\n" +
	"$ERROR_CODE_RULE_DEFINITION_NOT_FOUND\x10\xad\x1f\x12*\n" +
	"%ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND\x10\xae\x1f\x12#\n" +
	"\x1eERROR_CODE_REFERENCE_NOT_FOUND\x10\xaf\x1f\x12\x18\n" +
	"\x13ERROR_CODE_INTERNAL\x10\x88'\x12\x19\n" +
	"\x14ERROR_CODE_CANCELLED\x10\x89'\x12\x1b\n" +
	"\x16ERROR_CODE_SQL_BUILDER\x10\x8a'\x12\x1f\n" +
	"\x1aERROR_CODE_CIRCUIT_BREAKER\x10\x8b'\x12\x19\n" +
	"\x14ERROR_CODE_EXECUTION\x10\x8d'\x12\x14\n" +
	"\x0fERROR_CODE_SCAN\x10\x8e'\x12\x19\n" +
	"\x14ERROR_CODE_MIGRATION\x10\x8f'\x12!\n" +
	"\x1cERROR_CODE_TYPE_CONVERSATION\x10\x90'\x12!\n" +
	"\x1cERROR_CODE_ERROR_MAX_RETRIES\x10\x91'\x12\x18\n" +
	"\x13ERROR_CODE_ROLLBACK\x10\x92'\x129\n" +
	"4ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION\x10\x93'\x12\x1f\n" +
	"\x1aERROR_CODE_NOT_IMPLEMENTED\x10\x94'\x12\x19\n" +
	"\x14ERROR_CODE_DATASTORE\x10\x95'\x12&\n" +
	"!ERROR_CODE_UNKNOWN_STATEMENT_TYPE\x10\x96'\x12&\n" +
	"!ERROR_CODE_UNKNOWN_REFERENCE_TYPE\x10\x97'\x122\n" +
	"-ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT\x10\x98'\x124\n" +
	"/ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT\x10\x99'\x125\n" +
	"0ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT\x10\x9a'\x12\x1d\n" +
	"\x18ERROR_CODE_SERIALIZATION\x10\x9b'B\x89\x01\n" +
	"\vcom.base.v1B\vErrorsProtoP\x01Z0github.com/Permify/permify/pkg/pb/base/v1;basev1\xa2\x02\x03BXX\xaa\x02\aBase.V1\xca\x02\aBase\\V1\xe2\x02\x13Base\\V1\\GPBMetadata\xea\x02\bBase::V1b\x06proto3"

var (
	file_base_v1_errors_proto_rawDescOnce sync.Once
	file_base_v1_errors_proto_rawDescData []byte
)

func file_base_v1_errors_proto_rawDescGZIP() []byte {
	file_base_v1_errors_proto_rawDescOnce.Do(func() {
		file_base_v1_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_base_v1_errors_proto_rawDesc), len(file_base_v1_errors_proto_rawDesc)))
	})
	return file_base_v1_errors_proto_rawDescData
}

var file_base_v1_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_base_v1_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_base_v1_errors_proto_goTypes = []any{
	(ErrorCode)(0),        // 0: base.v1.ErrorCode
	(*ErrorResponse)(nil), // 1: base.v1.ErrorResponse
}
var file_base_v1_errors_proto_depIdxs = []int32{
	0, // 0: base.v1.ErrorResponse.code:type_name -> base.v1.ErrorCode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_base_v1_errors_proto_init() }
func file_base_v1_errors_proto_init() {
	if File_base_v1_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_base_v1_errors_proto_rawDesc), len(file_base_v1_errors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_v1_errors_proto_goTypes,
		DependencyIndexes: file_base_v1_errors_proto_depIdxs,
		EnumInfos:         file_base_v1_errors_proto_enumTypes,
		MessageInfos:      file_base_v1_errors_proto_msgTypes,
	}.Build()
	File_base_v1_errors_proto = out.File
	file_base_v1_errors_proto_goTypes = nil
	file_base_v1_errors_proto_depIdxs = nil
}
